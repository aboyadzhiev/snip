name: snip
services:
  api-server:
    build:
      dockerfile: Dockerfile
      context: server
    ports:
      - "127.0.0.1:8081:8081"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      valkey:
        condition: service_healthy
        restart: true
    secrets:
      - postgres-password
    environment:
      - "SNIP_HOSTNAME=${SNIP_HOSTNAME}"
      - "POSTGRES_HOST=${POSTGRES_HOST}"
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_DB=${POSTGRES_DB}"
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password
      - "VALKEY_HOSTS=${VALKEY_HOSTS}"
      - "URLHAUS_API_ENDPOINT=${URLHAUS_API_ENDPOINT}"
    networks:
      - snip
    command: " -addr=:8081"

  valkey:
    image: valkey/valkey:8-alpine
    restart: on-failure
    healthcheck:
      test: '[ $$(valkey-cli ping) = ''PONG'' ]'
      start_period: 30s
      timeout: 3s
      interval: 1s
      retries: 5
    volumes:
      - valkey:/data
    command: "valkey-server --port 6379 --save 60 1 --loglevel warning"
    expose:
      - "6379"
    networks:
      - snip

  db:
    image: postgres:17
    restart: on-failure
    shm_size: 128mb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 1m
    secrets:
      - postgres-password
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - snip
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_DB=${POSTGRES_DB}"
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password
    expose:
      - 5432
    ports:
      - "127.0.0.1:5432:5432"

  client:
    image: caddy:2
    restart: unless-stopped
    depends_on:
      api-server:
        condition: service_started
        restart: true
    networks:
      - snip
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - $PWD/client/conf:/etc/caddy
      - $PWD/client/site:/srv
      - caddy_data:/data
      - caddy_config:/config

volumes:
  db_data:
  valkey:
  caddy_data:
  caddy_config:
secrets:
  postgres-password:
    environment: "POSTGRES_PASSWORD"
networks:
  snip:
